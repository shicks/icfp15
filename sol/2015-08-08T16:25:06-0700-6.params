Problems: problems/problem_6.json
Words:    "ei!" "ia! ia!" "r'lyeh" "yuggoth"
Args:     ./main -f problems/problem_6.json -p ei! -p ia! ia! -p r'lyeh -p yuggoth --tag sol/2015-08-08T16:25:06-0700-6
Commit:   3b1d582e64915e080672f29f92861357562d1c50

Stat:
 Board.hs | 4 ++--
 Game.hs  | 9 +++++----
 Unit.hs  | 2 +-
 3 files changed, 8 insertions(+), 7 deletions(-)

===DIFF===
diff --git a/Board.hs b/Board.hs
index 98cb77f..4c2ed91 100644
--- a/Board.hs
+++ b/Board.hs
@@ -13,7 +13,7 @@ import Data.Array ( Array,
                     (!), (//) )
 import qualified Data.ByteString.Lazy as B
 import Data.Ix ( Ix(..) )
-import Data.List ( intercalate )
+import Data.List ( intercalate, sort )
 
 data Board = Board { cells :: Array Pos Bool }
 
@@ -42,7 +42,7 @@ type YMap = Int -> Maybe Int
 fill :: [Pos] -> Board -> Board
 fill ps (Board cs) = clearLines ys $
                      Board $ accum (const id) cs $ map (\p -> (p, True)) ps
-  where ys = uniq $ map posY ps
+  where ys = uniq $ sort $ map posY ps  -- why wasn't it sorted at the start?!?
         uniq (x:y:xs) | x == y = uniq (x:xs)
         uniq (x:xs) = x:uniq xs
         uniq [] = []
diff --git a/Game.hs b/Game.hs
index 0f1ab33..8e9ee96 100644
--- a/Game.hs
+++ b/Game.hs
@@ -8,8 +8,6 @@ import Unit
 import Problem
 import Source
 
-import Debug.Trace
-
 import Control.Applicative ( (<$>), (<*>) )
 import Control.Arrow ( first )
 import Data.Aeson ((.:), FromJSON(..), Value(..))
@@ -17,10 +15,13 @@ import Data.Array ( Array,
                     accum, array, assocs, bounds, elems, indices, ixmap, listArray, 
                     (!), (//) )
 import Data.Ix ( inRange, range )
-import Data.List ( maximumBy )
+import Data.List ( maximumBy, sort )
 import Data.Ord ( comparing )
 import qualified Data.Set as S
 
+import Debug.Trace
+-- trace _ x = x
+
 data Piece = Piece Unit Pos Int  -- unit, position, rotation
            deriving ( Show )
 
@@ -69,7 +70,7 @@ score ls_old piece board = points - gap_penalty + height_bonus + same_row_bonus
         line_points = 100 * (1 + ls) * ls `div` 2
         cellsList = realize piece
         cellsSet = S.fromList cellsList
-        ys = uniq $ map posY cellsList
+        ys = uniq $ sort $ map posY cellsList
         ls = length $ filter full ys
         same_row_bonus = (sum $ map same_row ys) * same_row_factor
         same_row y = length $ filter (\p -> (cells board ! p) || (p `S.member` cellsSet)) $
diff --git a/Unit.hs b/Unit.hs
index 76f1612..812ebdb 100644
--- a/Unit.hs
+++ b/Unit.hs
@@ -57,7 +57,7 @@ instance Show Unit where
            ++ show' False (range (Pos 0 0, extent))
     where width = 1 + posX extent
           show' _ [] = ""
-          show' offset ps = (if offset then (' ':) else id) $ row ps $
+          show' offset ps = (if offset then {- (' ':) -} id else id) $ row ps $
                             show' (not offset) (drop width ps)
           row [] _ = ""
           row ps rest = '|':row' (take width ps) rest

